# github repository actions 페이지에 나타날 이름
name: CI/CD using GitHub Actions & Docker

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
       # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # gradle caching - 빌드 시간 향상
      - name: Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle
      # 환경별 yml 파일 생성(1) - application.yml
      - name: Make application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.YML }}" > src/main/resources/application.yml
          
      # 환경별 yml 파일 생성(1) - application-aws.yml
      - name: Make application-aws.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.YML_AWS }}" > src/main/resources/application-aws.yml

      - name: Build project
        run: ./gradlew build -x test

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build & Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/wannago .
          docker push ${{ secrets.DOCKER_USERNAME }}/wannago:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME }}      # 보통 ubuntu
          key: ${{ secrets.PRIVATE_KEY }}        # .pem 키
          script: |
            docker stop wannago || true
            docker rm wannago || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/wannago
            docker run -d --name wannago -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/wannago
